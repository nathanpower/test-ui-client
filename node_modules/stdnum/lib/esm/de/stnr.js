import * as exceptions from '../exceptions';
import { strings } from '../util';
function clean(input) {
    return strings.cleanUnicode(input, ' -./,');
}
function buildMatch(fmt) {
    const pattern = fmt.replace(/([FBUP])\1*/g, m => {
        return `(\\d{${m.length}})`;
    });
    const matcher = new RegExp(`^${pattern}$`);
    return (value) => {
        var _a, _b, _c, _d;
        const m = matcher.exec(value);
        if (!m) {
            return { match: false };
        }
        return {
            match: true,
            f: (_a = m[1]) !== null && _a !== void 0 ? _a : '',
            b: (_b = m[2]) !== null && _b !== void 0 ? _b : '',
            u: (_c = m[3]) !== null && _c !== void 0 ? _c : '',
            p: (_d = m[4]) !== null && _d !== void 0 ? _d : '',
        };
    };
}
function buildMatcher(rfmt, cfmt) {
    return {
        region: buildMatch(rfmt),
        country: buildMatch(cfmt),
    };
}
const REGION_FORMATS = {
    'DE-BW': buildMatcher('FFBBBUUUUP', '28FF0BBBUUUUP'),
    'DE-BY': buildMatcher('FFFBBBUUUUP', '9FFF0BBBUUUUP'),
    'DE-BE': buildMatcher('FFBBBUUUUP', '11FF0BBBUUUUP'),
    'DE-BB': buildMatcher('0FFBBBUUUUP', '30FF0BBBUUUUP'),
    'DE-HB': buildMatcher('FFBBBUUUUP', '24FF0BBBUUUUP'),
    'DE-HH': buildMatcher('FFBBBUUUUP', '22FF0BBBUUUUP'),
    'DE-HE': buildMatcher('0FFBBBUUUUP', '26FF0BBBUUUUP'),
    'DE-MV': buildMatcher('0FFBBBUUUUP', '40FF0BBBUUUUP'),
    'DE-NI': buildMatcher('FFBBBUUUUP', '23FF0BBBUUUUP'),
    'DE-NW': buildMatcher('FFFBBBBUUUP', '5FFF0BBBBUUUP'),
    'DE-RP': buildMatcher('FFBBBUUUUP', '27FF0BBBUUUUP'),
    'DE-SL': buildMatcher('0FFBBBUUUUP', '10FF0BBBUUUUP'),
    'DE-SN': buildMatcher('2FFBBBUUUUP', '32FF0BBBUUUUP'),
    'DE-ST': buildMatcher('1FFBBBUUUUP', '31FF0BBBUUUUP'),
    'DE-SH': buildMatcher('FFBBBUUUUP', '21FF0BBBUUUUP'),
    'DE-TH': buildMatcher('1FFBBBUUUUP', '41FF0BBBUUUUP'),
};
function findMatch(value) {
    let result = null;
    Object.values(REGION_FORMATS).some(({ region, country }) => {
        const rResult = region(value);
        if (rResult.match) {
            result = rResult;
            return true;
        }
        const cResult = country(value);
        if (cResult.match) {
            result = cResult;
            return true;
        }
        return false;
    });
    return result;
}
const impl = {
    name: 'German Tax Number',
    localName: 'Steuernummer',
    abbreviation: ' St.-Nr.',
    compact(input) {
        const [value, err] = clean(input);
        if (err) {
            throw err;
        }
        return value;
    },
    format(input) {
        const [value] = clean(input);
        const match = findMatch(input);
        if (!match || !match.match) {
            return value;
        }
        return `${match.f}/${match.b}/${match.u} ${match.p}`;
    },
    validate(input) {
        const [value, error] = clean(input);
        if (error) {
            return { isValid: false, error };
        }
        if (![10, 11, 13].includes(value.length)) {
            return { isValid: false, error: new exceptions.InvalidLength() };
        }
        if (!strings.isdigits(value)) {
            return { isValid: false, error: new exceptions.InvalidFormat() };
        }
        if (findMatch(value) === null) {
            return { isValid: false, error: new exceptions.InvalidFormat() };
        }
        const counter = {};
        value
            .substring(0, 10)
            .split('')
            .forEach(v => {
            var _a;
            counter[v] = ((_a = counter[v]) !== null && _a !== void 0 ? _a : 0) + 1;
        });
        const more = Object.values(counter);
        if (!more.some(v => v === 2 || v === 3)) {
            return { isValid: false, error: new exceptions.InvalidComponent() };
        }
        return {
            isValid: true,
            compact: value,
            isIndividual: false,
            isCompany: true,
        };
    },
};
export const { name, localName, abbreviation, validate, format, compact } = impl;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Ruci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9kZS9zdG5yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWlCQSxPQUFPLEtBQUssVUFBVSxNQUFNLGVBQWUsQ0FBQztBQUM1QyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBSWxDLFNBQVMsS0FBSyxDQUFDLEtBQWE7SUFDMUIsT0FBTyxPQUFPLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztBQUM5QyxDQUFDO0FBY0QsU0FBUyxVQUFVLENBQUMsR0FBVztJQUM3QixNQUFNLE9BQU8sR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsRUFBRTtRQUM5QyxPQUFPLFFBQVEsQ0FBQyxDQUFDLE1BQU0sSUFBSSxDQUFDO0lBQzlCLENBQUMsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxPQUFPLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFDO0lBRTNDLE9BQU8sQ0FBQyxLQUFhLEVBQVMsRUFBRTs7UUFDOUIsTUFBTSxDQUFDLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUU5QixJQUFJLENBQUMsQ0FBQyxFQUFFO1lBQ04sT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQztTQUN6QjtRQUVELE9BQU87WUFDTCxLQUFLLEVBQUUsSUFBSTtZQUNYLENBQUMsRUFBRSxNQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsbUNBQUksRUFBRTtZQUNiLENBQUMsRUFBRSxNQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsbUNBQUksRUFBRTtZQUNiLENBQUMsRUFBRSxNQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsbUNBQUksRUFBRTtZQUNiLENBQUMsRUFBRSxNQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsbUNBQUksRUFBRTtTQUNkLENBQUM7SUFDSixD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