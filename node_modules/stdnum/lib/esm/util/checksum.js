function sumAllDigits(value) {
    let localValue = value;
    let sum = 0;
    while (localValue) {
        sum += localValue % 10;
        localValue = Math.floor(localValue / 10);
    }
    return sum;
}
export function weightedSum(value, { alphabet = '0123456789', reverse = false, weights = [1], modulus = 0, sumByDigit = false, }) {
    const wlen = weights.length;
    const numbers = value.split('').map(v => alphabet.indexOf(v));
    const weighted = (reverse ? numbers.reverse() : numbers).map((v, idx) => v * weights[idx % wlen]);
    return weighted.reduce((acc, v) => {
        let vv = v;
        while (vv < 0) {
            vv += modulus;
        }
        if (sumByDigit && vv > 9) {
            return (acc + sumAllDigits(vv)) % modulus;
        }
        return (acc + vv) % modulus;
    }, 0);
}
export function luhnChecksum(value, alphabet = '0123456789') {
    const parity = value.length % 2;
    const sum = value
        .split('')
        .reverse()
        .map(v => alphabet.indexOf(v))
        .reduce((acc, val, idx) => {
        const v = idx % 2 === parity ? val * 2 : val;
        return acc + (v > 9 ? v - 9 : v);
    }, 0);
    return sum % alphabet.length;
}
export function luhnChecksumValidate(value, alphabet = '0123456789') {
    const parity = value.length % 2;
    const sum = value
        .split('')
        .map(v => alphabet.indexOf(v))
        .reduce((acc, val, idx) => {
        const v = idx % 2 === parity ? val * 2 : val;
        return acc + (v > 9 ? v - 9 : v);
    }, 0);
    return sum % alphabet.length === 0;
}
export function luhnChecksumValue(value, alphabet = '0123456789') {
    const alen = alphabet.length;
    return value
        .split('')
        .reverse()
        .map(v => alphabet.indexOf(v))
        .reduce((acc, v, idx) => {
        if (idx % 2 === 0) {
            return (acc + v) % alen;
        }
        return (acc + Math.floor((v * 2) / alen) + ((v * 2) % alen)) % alen;
    });
}
export function luhnChecksumDigit(value, alphabet = '0123456789') {
    const cs = luhnChecksumValue(`${value}${alphabet[0]}`);
    return alphabet[(alphabet.length - cs) % alphabet.length];
}
const verhoeffD = [
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
    [1, 2, 3, 4, 0, 6, 7, 8, 9, 5],
    [2, 3, 4, 0, 1, 7, 8, 9, 5, 6],
    [3, 4, 0, 1, 2, 8, 9, 5, 6, 7],
    [4, 0, 1, 2, 3, 9, 5, 6, 7, 8],
    [5, 9, 8, 7, 6, 0, 4, 3, 2, 1],
    [6, 5, 9, 8, 7, 1, 0, 4, 3, 2],
    [7, 6, 5, 9, 8, 2, 1, 0, 4, 3],
    [8, 7, 6, 5, 9, 3, 2, 1, 0, 4],
    [9, 8, 7, 6, 5, 4, 3, 2, 1, 0],
];
const verhoeffP = [
    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9],
    [1, 5, 7, 6, 2, 8, 3, 0, 9, 4],
    [5, 8, 0, 3, 7, 9, 6, 1, 4, 2],
    [8, 9, 1, 6, 0, 4, 3, 5, 2, 7],
    [9, 4, 5, 3, 1, 2, 6, 8, 7, 0],
    [4, 2, 8, 6, 5, 7, 3, 9, 0, 1],
    [2, 7, 9, 3, 8, 0, 6, 4, 1, 5],
    [7, 0, 4, 6, 9, 1, 3, 2, 5, 8],
];
const verhoeffInv = [0, 4, 3, 2, 1, 5, 6, 7, 8, 9];
function invArray(array) {
    return array
        .split('')
        .map(v => parseInt(v, 10))
        .reverse();
}
export function verhoeffGenerate(array) {
    const invertedArray = invArray(array);
    const value = invertedArray.reduce((c, v, idx) => verhoeffD[c][verhoeffP[(idx + 1) % 8][v]], 0);
    return verhoeffInv[value];
}
export function verhoeffValidate(array) {
    const invertedArray = invArray(array);
    const sum = invertedArray.reduce((c, v, idx) => verhoeffD[c][verhoeffP[idx % 8][v]], 0);
    return sum === 0;
}
function modulo(dividentIn, divisor) {
    let divident = dividentIn;
    const partLength = 10;
    while (divident.length > partLength) {
        const part = divident.substring(0, partLength);
        divident = (parseInt(part, 10) % divisor) + divident.substring(partLength);
    }
    return parseInt(divident, 10) % divisor;
}
export function mod97base10Validate(value) {
    const alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    let fail = false;
    const bigValue = value
        .split('')
        .map(c => {
        const idx = alphabet.indexOf(c);
        if (idx === -1) {
            fail = true;
            return '';
        }
        return String(idx);
    })
        .join('');
    if (fail) {
        return false;
    }
    return modulo(bigValue, 97) === 1;
}
export function mod11mod10Validate(value) {
    const sum = value
        .split('')
        .map(v => parseInt(v, 10))
        .reduce((acc, n) => ((((acc === 0 ? 10 : acc) * 2) % 11) + n) % 10, 5);
    return sum === 1;
}
//# sourceMappingURL=data:application/json;base64,